# Import necessary libraries
import numpy as np
import pandas as pd
from osgeo import gdal
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Load the Landsat 8 image data
filename = 'path/to/landsat8_image.tif'
ds = gdal.Open(filename)

# Extract the bands from the dataset
band1 = ds.GetRasterBand(1).ReadAsArray().astype(np.float32)
band2 = ds.GetRasterBand(2).ReadAsArray().astype(np.float32)
band3 = ds.GetRasterBand(3).ReadAsArray().astype(np.float32)
band4 = ds.GetRasterBand(4).ReadAsArray().astype(np.float32)
band5 = ds.GetRasterBand(5).ReadAsArray().astype(np.float32)
band6 = ds.GetRasterBand(6).ReadAsArray().astype(np.float32)
band7 = ds.GetRasterBand(7).ReadAsArray().astype(np.float32)

# Stack the bands to create an input array
X = np.dstack((band1, band2, band3, band4, band5, band6, band7))

# Load the training data
train_file = 'path/to/training_data.csv'
train_data = pd.read_csv(train_file)

# Split the data into input features and target labels
y = train_data.pop('Class').values
X_train, X_test, y_train, y_test = train_test_split(train_data, y, test_size=0.2, random_state=42)

# Train a random forest classifier
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Make predictions on the test set
y_pred = clf.predict(X_test)

# Evaluate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print('Accuracy:', accuracy)

import numpy as np
import pandas as pd
from osgeo import gdal
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import to_categorical

ds = gdal.Open(filename)

# Extract the bands from the dataset
band1 = ds.GetRasterBand(1).ReadAsArray().astype(np.float32)
band2 = ds.GetRasterBand(2).ReadAsArray().astype(np.float32)
band3 = ds.GetRasterBand(3).ReadAsArray().astype(np.float32)
band4 = ds.GetRasterBand(4).ReadAsArray().astype(np.float32)
band5 = ds.GetRasterBand(5).ReadAsArray().astype(np.float32)
band6 = ds.GetRasterBand(6).ReadAsArray().astype(np.float32)
band7 = ds.GetRasterBand(7).ReadAsArray().astype(np.float32)

# Stack the bands to create an input array
X = np.dstack((band1, band2, band3, band4, band5, band6, band7))

# Load the training data
train_file = 'path/to/training_data.csv'
train_data = pd.read_csv(train_file)

# Split the data into input features and target labels
y = train_data.pop('Class').values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Preprocess the data
num_classes = len(np.unique(y_train))
y_train = to_categorical(y_train, num_classes=num_classes)
y_test = to_categorical(y_test, num_classes=num_classes)

# Create a CNN model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=X_train.shape[1:]),
    MaxPooling2D(pool_size=(2, 2)),
    Dropout(0.25),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Dropout(0.25),
    Flatten(),
    Dense(256, activation='relu'),
    Dropout(0.5),
    Dense(num_classes, activation='softmax')
])

# Compile the model
model.compile(loss='categorical_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, batch_size=32, epochs=10, validation_data=(X_test, y_test))

# Evaluate the model
score = model.evaluate(X_test, y_test)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

# Import necessary libraries
import numpy as np
import pandas as pd
from osgeo import gdal
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import accuracy_score

# Load the Landsat 8 image data
filename = 'path/to/landsat8_image.tif'
ds = gdal.Open(filename)

train_data = pd.read_csv(train_file)

# Split the data into input features and target labels
y = train_data.pop('Class').values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Preprocess the data
num_classes = len(np.unique(y_train))
y_train = to_categorical(y_train, num_classes=num_classes)
y_test = to_categorical(y_test, num_classes=num_classes)

# Create a dictionary to store the different models
models = {}

# Create a CNN model
model_cnn = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=X_train.shape[1:]),
    MaxPooling2D(pool_size=(2, 2)),
    Dropout(0.25),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Dropout(0.25),
    Flatten(),
    Dense(256, activation='relu'),
    Dropout(0.5),
    Dense(num_classes, activation='softmax')
])
models['CNN'] = model_cnn

# Create a fully connected neural network model
model_fc = Sequential([
    Flatten(input_shape=X_train.shape[1:]),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(num_classes, activation='softmax')
])
models['FCNN'] = model_fc

# Create a support vector machine (SVM) model
from sklearn.svm import SVC
model_svm = SVC(kernel='rbf', C=10, gamma=0.1)
models['SVM'] = model_svm

# Train and evaluate the models
for name, model in models.items():
    if name == 'SVM':
        model.fit(X_train.reshape((X_train.shape[0], -1)), y_train.argmax(axis=1))
        y_pred = model.predict(X_test.reshape((X_test.shape[0], -1)))
    else:
# Compile the model
    model.compile(optimizer=Adam(learning_rate=0.001),
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])
    # Train the model
    model.fit(X_train, y_train, epochs=10, batch_size=32, verbose=1)
    # Evaluate the model
    _, accuracy = model.evaluate(X_test, y_test, verbose=0)
    y_pred = np.argmax(model.predict(X_test), axis=-1)

# Print the accuracy of each model
print(f'{name} accuracy:', accuracy_score(y_test.argmax(axis=1), y_pred))
       
